#include <SPI.h>
#include <LoRa.h>
#include <U8x8lib.h>
#include <U8g2lib.h>


//Libraries for BME280
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

//BME280 definition festlegen
#define SDA 4
#define SCL 15

TwoWire I2Cone = TwoWire(1);
Adafruit_BME280 bme;

//Paketzähler ID setzen
int readingID = 0;

int counter = 0;
String LoRaMessage = "";

float temperature = 0;
float humidity = 0;
float pressure = 0;

#define ss 18
#define rst 14
#define dio0 26

//ISM Band festlegen (hier in Europa 868MHZ)

#define BAND 866E6


// Display passend konfigurieren 

U8G2_SSD1306_128X64_NONAME_F_SW_I2C u8g2(U8G2_R0, /* clock=*/ 15, /* data=*/ 4, /* reset=*/ 16);
U8X8_SSD1306_128X64_NONAME_SW_I2C u8x8(15, 4, 16);



// Um Grafiken umzuwandeln sollte diese in S/W sein die passende Größe hier 128x64 Pixel haben
// und als xbm exportiert werden.
 

static unsigned char TK_OLED_SOURCE_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xaf, 0xaa, 0xba, 0xfa, 0x57, 0x57, 0x55, 0xfd, 0xfa, 0x7f, 0xf5, 0x7f,
   0xf5, 0xff, 0x85, 0xfe, 0x07, 0x00, 0x30, 0xf8, 0x07, 0x03, 0x00, 0x70,
   0xe0, 0x3f, 0xf0, 0x3f, 0xf0, 0xff, 0x00, 0xf8, 0x07, 0x00, 0x30, 0xf8,
   0x07, 0x03, 0x00, 0x70, 0xe0, 0x3f, 0xf0, 0x3f, 0xf0, 0x7f, 0x00, 0xf8,
   0x07, 0x00, 0x30, 0xf8, 0x07, 0x03, 0x00, 0x70, 0xc0, 0x3f, 0xf0, 0x1f,
   0xf0, 0x3f, 0x00, 0xf8, 0x0f, 0x00, 0x30, 0xf8, 0x07, 0x03, 0x00, 0x70,
   0xc0, 0x3f, 0xf0, 0x1f, 0xe0, 0x1f, 0x00, 0xf8, 0xff, 0xc1, 0x3f, 0xf8,
   0x07, 0x07, 0x00, 0x78, 0xc0, 0x1f, 0xf0, 0x1f, 0xe0, 0x1f, 0xf8, 0xfe,
   0xff, 0xc1, 0x3f, 0xf8, 0x07, 0xff, 0xff, 0x3f, 0x80, 0x1f, 0xe0, 0x0f,
   0xc0, 0x1f, 0xfc, 0xff, 0xff, 0xc1, 0x3f, 0xf8, 0x07, 0xff, 0xff, 0x7f,
   0x80, 0x0f, 0xe0, 0x0f, 0xc0, 0x1f, 0xf8, 0xff, 0xff, 0xc1, 0x3f, 0xf8,
   0x07, 0xff, 0xff, 0x3f, 0x00, 0x0f, 0xe0, 0x0f, 0x80, 0x1f, 0xf8, 0xff,
   0xff, 0xc1, 0x3f, 0xf8, 0x07, 0xff, 0xff, 0x7f, 0x00, 0x07, 0xe0, 0x0f,
   0x82, 0x1f, 0xe0, 0xff, 0xff, 0xc1, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x3f,
   0x00, 0x06, 0xe0, 0x07, 0x83, 0x3f, 0x80, 0xff, 0xff, 0xc1, 0x3f, 0x00,
   0x00, 0xff, 0xff, 0x7f, 0x08, 0x86, 0xe0, 0x07, 0x83, 0x3f, 0x00, 0xfe,
   0xff, 0xc1, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x3f, 0x08, 0x82, 0xe0, 0x83,
   0x07, 0xff, 0x00, 0xfc, 0xff, 0xc1, 0x3f, 0x00, 0x00, 0xff, 0xff, 0x7f,
   0x10, 0x82, 0xe0, 0x83, 0x07, 0xff, 0x01, 0xf8, 0xff, 0xc1, 0x3f, 0xd8,
   0x06, 0xff, 0xff, 0x3f, 0x18, 0xc0, 0xe0, 0x03, 0x00, 0xff, 0x0f, 0xf8,
   0xff, 0xc1, 0x3f, 0xf8, 0x07, 0xff, 0xff, 0x7f, 0x18, 0xc0, 0xe0, 0x01,
   0x00, 0xfe, 0x1f, 0xf0, 0xff, 0xc1, 0x3f, 0xf8, 0x07, 0xff, 0xff, 0x3f,
   0x30, 0xe0, 0xe0, 0x01, 0x00, 0xfc, 0x3f, 0xf0, 0xff, 0xc1, 0x3f, 0xf8,
   0x07, 0xff, 0xff, 0x7f, 0x30, 0xe0, 0xe0, 0x01, 0x00, 0xfc, 0x3f, 0xf0,
   0xff, 0xc1, 0x3f, 0xf8, 0x07, 0xaf, 0xaa, 0x3a, 0x78, 0xf0, 0xe0, 0xc0,
   0x0f, 0xbc, 0x3f, 0xf0, 0xff, 0xc1, 0x3f, 0xf8, 0x07, 0x03, 0x00, 0x70,
   0x78, 0xf0, 0xe0, 0xe0, 0x1f, 0x0c, 0x1e, 0xf0, 0xff, 0xc1, 0x3f, 0xf8,
   0x07, 0x03, 0x00, 0x30, 0xf0, 0xfd, 0x60, 0xe0, 0x1f, 0x0c, 0x00, 0xf8,
   0xff, 0xc1, 0x3f, 0xf8, 0x07, 0x03, 0x00, 0x30, 0xf8, 0xff, 0x60, 0xf0,
   0x3f, 0x08, 0x00, 0xfc, 0xff, 0xc1, 0x3f, 0xf8, 0x07, 0x03, 0x00, 0x30,
   0xf8, 0xff, 0x60, 0xf0, 0x3f, 0x08, 0x00, 0xfc, 0xff, 0xc1, 0x3f, 0xf8,
   0x07, 0x07, 0x00, 0x38, 0xf8, 0xff, 0x60, 0xf0, 0x3f, 0x30, 0x00, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x3f, 0xfc, 0xff, 0xff, 0xc1, 0x1f, 0x1c, 0x00, 0xff, 0x00, 0x80,
   0x83, 0xff, 0xf0, 0xe1, 0x3f, 0x18, 0xf8, 0xff, 0xff, 0xc3, 0x1f, 0x1c,
   0x00, 0xfc, 0x01, 0x80, 0x07, 0xff, 0xe0, 0xc1, 0x7f, 0x58, 0xfa, 0xff,
   0xff, 0xc1, 0x0f, 0x1e, 0x00, 0xf8, 0x00, 0x80, 0x03, 0xff, 0xe0, 0x81,
   0x3f, 0x58, 0xf2, 0xff, 0xff, 0xc1, 0x07, 0x1e, 0x00, 0xf0, 0x00, 0x80,
   0x03, 0xfe, 0xe0, 0x81, 0x3f, 0x18, 0xf8, 0xff, 0xff, 0xc1, 0x03, 0x1f,
   0x28, 0xf0, 0x40, 0xd5, 0x03, 0xfe, 0xe0, 0x01, 0x3f, 0x38, 0xfc, 0xff,
   0xff, 0xc1, 0x83, 0x1f, 0x7c, 0xf0, 0xe0, 0xff, 0x03, 0xfc, 0xe0, 0x01,
   0x3e, 0xf8, 0xff, 0xff, 0xff, 0xc1, 0x81, 0x1f, 0x78, 0xe0, 0xe0, 0xff,
   0x03, 0xf8, 0xe0, 0x01, 0x3e, 0xf8, 0xff, 0xff, 0xff, 0xc1, 0xc0, 0x1f,
   0x7c, 0xe0, 0xe0, 0xff, 0x03, 0xf0, 0xe0, 0x01, 0x3c, 0xf8, 0xff, 0xff,
   0xff, 0x41, 0xe0, 0x1f, 0x78, 0xf0, 0xe0, 0xff, 0x03, 0xf0, 0xe0, 0x01,
   0x3c, 0xf8, 0xff, 0xff, 0xff, 0x01, 0xf0, 0x1f, 0x7c, 0xf0, 0xc0, 0xff,
   0x03, 0xe0, 0xe0, 0x01, 0x30, 0xf8, 0xff, 0xff, 0xff, 0x01, 0xf8, 0x1f,
   0x1c, 0xf0, 0x00, 0xe0, 0x83, 0xe0, 0xe0, 0x01, 0x30, 0xf8, 0xff, 0xff,
   0xff, 0x01, 0xf0, 0x1f, 0x00, 0xf8, 0x00, 0xc0, 0x83, 0xc0, 0xe0, 0x41,
   0x30, 0xf8, 0xff, 0xff, 0xff, 0x01, 0xe0, 0x1f, 0x00, 0xf8, 0x00, 0xe0,
   0x83, 0x81, 0xe0, 0x41, 0x20, 0xf8, 0xff, 0xff, 0xff, 0x01, 0xe0, 0x1f,
   0x00, 0xfe, 0x00, 0xe0, 0x83, 0x83, 0xe0, 0xc1, 0x00, 0xf8, 0xff, 0xff,
   0xff, 0x81, 0xc0, 0x1f, 0x00, 0xfe, 0xe0, 0xff, 0x83, 0x03, 0xe0, 0xc1,
   0x00, 0xf8, 0xff, 0xff, 0xff, 0x81, 0xc0, 0x1f, 0x0c, 0xfc, 0xe0, 0xff,
   0x83, 0x07, 0xe0, 0xc1, 0x01, 0xf8, 0xff, 0xff, 0xff, 0xc1, 0x81, 0x1f,
   0x08, 0xfc, 0xe0, 0xff, 0x83, 0x0f, 0xe0, 0xc1, 0x03, 0xf8, 0xff, 0xff,
   0xff, 0xc1, 0x83, 0x1f, 0x1c, 0xf8, 0xe0, 0xff, 0x83, 0x0f, 0xe0, 0xc1,
   0x07, 0xf8, 0xff, 0xff, 0xff, 0xc1, 0x03, 0x1f, 0x18, 0xf8, 0xe0, 0xff,
   0x83, 0x1f, 0xe0, 0xc1, 0x07, 0xf8, 0xff, 0xff, 0xff, 0xc1, 0x07, 0x1e,
   0x3c, 0xf0, 0xc0, 0xff, 0x83, 0x3f, 0xe0, 0xc1, 0x0f, 0xf8, 0xff, 0xff,
   0xff, 0xc1, 0x07, 0x1e, 0x78, 0xf0, 0x00, 0x80, 0x83, 0x3f, 0xe0, 0xc1,
   0x1f, 0xf8, 0xff, 0xff, 0xff, 0xc1, 0x0f, 0x1c, 0x7c, 0xe0, 0x00, 0x80,
   0x83, 0x7f, 0xe0, 0xc1, 0x1f, 0xf8, 0xff, 0xff, 0xff, 0xc1, 0x1f, 0x1c,
   0xf8, 0xc0, 0x00, 0x80, 0x83, 0xff, 0xe0, 0xc1, 0x3f, 0xf8, 0xff, 0xff,
   0xff, 0xc1, 0x1f, 0x18, 0xfc, 0xc1, 0x00, 0x80, 0x83, 0xff, 0xe1, 0xc1,
   0x3f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff };





#define uS_TO_S_FACTOR 1000000  // Umberechnungsfaktor Mikro Sekunden auf Sekunden 
#define TIME_TO_SLEEP  120      // Dauer des Tiefschlafzustands in Sekunden 

RTC_DATA_ATTR int bootCount = 0;


void setup() {
  
 

  u8g2.begin();
  Serial.begin(115200);
  //while (!Serial);
  
  Serial.println("");
  Serial.println("----------------------------");
  Serial.println("  LoRa Sender with BME 280  ");
  Serial.println("----------------------------");
  Serial.println("");
  Serial.println("Booting...");

 u8g2.clearBuffer();          // Internen Display Speicher komplett löschen 
 u8g2.drawXBM(0,0, 128, 64, TK_OLED_SOURCE_bits);
 u8g2.sendBuffer();          // Inhalt des Speichers direkt auf das Display pushen

  
  delay(2000);  


// Statusmeldung 
// Auslesen des TempSensors / Versand des LoRa Paketes.   
// Nach Versand wird sofort in Deep Sleep Modus gewechselt
// hier ist nur noch der RTC in Betrieb 
// Core / Wifi / Lora usw. wird alles in dem Zeitraum von 120 sek abgeschaltet

  u8x8.begin();
  u8x8.setFont(u8x8_font_chroma48medium8_r);
  u8x8.drawString(0, 2, " Readout BME280" );
   delay (2000);

  u8x8.clear();
  u8x8.drawString(0, 2, " Send Data   ");
  u8x8.drawString(0, 3, "     &       ");
  u8x8.drawString(0, 4, " Deep Sleep  ");
  u8x8.drawString(0, 6, "..for 120 sec");
  delay (3000) ;
  u8x8.clear();


  SPI.begin(5, 19, 27, 18);
  LoRa.setPins(ss, rst, dio0);

  
  if (!LoRa.begin(868E6)) {
    Serial.println("Start of LoRa failed!");
    while (1);
  }
}

/*
void loop() {

  startBME();
 
  temperature = bme.readTemperature();
  humidity = bme.readHumidity();
  pressure = bme.readPressure() / 100.0F;
  Serial.print("Sending LoRa Packet: ");
 
    
  Serial.print("Sending Complete Data: ");
  LoRaMessage = String(temperature) + "/" + String(humidity) + "/" + String(pressure);
  Serial.println(LoRaMessage);
  
  // send packet
  LoRa.beginPacket();
  LoRa.print(LoRaMessage);
  LoRa.endPacket();
  counter++;

Serial.print("LoRa Message send....");
Serial.print("Entering Now --> DeepSleep Mode");
Serial.print(" for 120 sec..");
 
  
esp_sleep_enable_timer_wakeup(TIME_TO_SLEEP * uS_TO_S_FACTOR);
esp_deep_sleep_start();

}

*/

void loop() {
  // Testnachricht senden
  Serial.println("Sending test message...");

  // Nachricht vorbereiten
  LoRaMessage = "Test Message";
  Serial.println("Sending LoRa Packet: " + LoRaMessage);

  // LoRa-Paket senden
  LoRa.beginPacket();
  LoRa.print(LoRaMessage);
  LoRa.endPacket();
  counter++;

  Serial.println("LoRa Message sent.");

  // Endlosschleife, um den Code hier anzuhalten
  while (true) {
    // Optionale Statusmeldung für Debugging
    Serial.println("Waiting...");
    delay(10000); // Warten, um den Serial Monitor nicht zu überfluten
  }
}



void startBME(){

  delay(1000);
 
  
  I2Cone.begin(SDA, SCL, 100000); 
  bool status1 = bme.begin(0x76, &I2Cone);  
  if (!status1) {
    Serial.println("Kein BME280 Sensor gefunden!");
    while (1);
  }

  delay(3000);
 
}
